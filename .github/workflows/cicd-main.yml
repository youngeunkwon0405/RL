# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "CICD NeMo RL"

on:
  pull_request:
    branches:
      - "main"
      - "r**"
    types: [labeled, opened, synchronize, reopened]
  merge_group:
    types: [checks_requested]
  workflow_dispatch:
    inputs:
      test_to_run:
        required: false
        default: L2
        type: choice
        options:
          - docs
          - L0
          - L1
          - L2
        description: Test level to run. docs = doc tests only, L0 = unit/docs/lint, L1 = L0 + functional, L2 = L1 + convergence
  # TODO: Due to limited compute, disabling pushes to main. This is okay to do since we force PRs to be up to date and the CI tests on pull/$PR_NUM/merge
  #push:
  #  branches:
  #    - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event.label.name || 'main' }}
  cancel-in-progress: true

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      test_level: ${{ steps.evaluate.outputs.test_level }}
    steps:
      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request'
        uses: step-security/changed-files@v45.0.1
        with:
          files_yaml: |
            doc:
              - '**.md'
              - docs/**
            src:
              - '!**.md'
              - '!docs/**'

      - name: Evaluate conditions
        id: evaluate
        env:
          DOCS_ONLY: ${{ steps.changed-files.outputs.doc_any_changed == 'true' && steps.changed-files.outputs.src_any_changed == 'false' }}
          CHANGED_DOCS: ${{ steps.changed-files.outputs.doc_all_changed_files }}
          CHANGED_SRC: ${{ steps.changed-files.outputs.src_all_changed_files }}
          IS_PULLREQUEST: ${{ github.event_name == 'pull_request' }}
          LABEL: ${{ github.event.label.name }}
          MERGE_GROUP: ${{ github.event_name == 'merge_group' }}
        run: |
          # Some output that's helpful for debugging
          echo "Docs changed: $CHANGED_DOCS"
          echo "Src changed: $CHANGED_SRC"
          echo "LABEL: $LABEL"
          echo "IS_PULLREQUEST: $IS_PULLREQUEST"
          echo "DOCS_ONLY: $DOCS_ONLY"

          # Run CI only (on main or if label is attached) and if it's not only docs
          # Determine test level based on conditions
          if [[ "$DOCS_ONLY" == "true" || "$LABEL" == "CI:docs" ]]; then
            # For doc-only changes, run only doc tests
            TEST_LEVEL="docs"
          elif [[ "$LABEL" == "CI:L0" ]]; then
            TEST_LEVEL="L0"
          elif [[ "$LABEL" == "CI:L1" || "$IS_PULLREQUEST" == "false" || "$MERGE_GROUP" == "true"  ]]; then
            # For labeled PRs, pushes to main (IS_PULL_REQUEST=false), or merge group events, run L1 by default
            TEST_LEVEL="L1"
          elif [[ "$LABEL" == "CI:L2" ]]; then
            TEST_LEVEL="L2"
          else
            # Skip tests by default for non-labeled PRs
            TEST_LEVEL="none"
          fi

          # Override test level if specified in workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Overriding test level from $TEST_LEVEL to ${{ inputs.test_to_run }}"
            TEST_LEVEL="${{ inputs.test_to_run }}"
          fi

          echo "test_level=$TEST_LEVEL" | tee -a "$GITHUB_OUTPUT"

  lint-check:
    name: Lint check
    needs: [pre-flight]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Check lint
        run: |
          pip install pre-commit==3.6.0
          pre-commit install
          pre-commit run --all-files --show-diff-on-failure --color=always

  mypy-check:
    name: Mypy check
    needs: [pre-flight]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check mypy
        run: |
          pip install uv
          uv run --group test mypy nemo_rl examples

  sphinx-build:
    if: ${{ needs.pre-flight.outputs.test_level != 'none' }}
    name: Sphinx build
    needs: [pre-flight]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: build docs
        run: |
          pip install uv
          cd docs/
          uv run --group docs sphinx-build --fail-on-warning --builder html . _build/html

  build-container:
    if: ${{ needs.pre-flight.outputs.test_level != 'none' }}
    needs: [pre-flight]
    uses: NVIDIA-NeMo/FW-CI-templates/.github/workflows/_build_container.yml@v0.30.0
    with:
      build-ref: ${{ github.sha }}
      image-name: nemo_rl_container
      dockerfile: docker/Dockerfile
      image-label: nemo-rl
      target: hermetic
      build-args: |
        MAX_JOBS=32
        NEMO_RL_COMMIT=${{ github.sha }}

  tests:
    name: Tests
    needs: [build-container, pre-flight]
    uses: ./.github/workflows/_run_test.yml
    if: ${{ needs.pre-flight.outputs.test_level != 'none' }}
    with:
      RUNNER: self-hosted-azure
      TIMEOUT: 90
      UNIT_TEST_SCRIPT: |
        cd /opt/nemo-rl
        if [[ "${{ needs.pre-flight.outputs.test_level }}" =~ ^(L0|L1|L2)$ ]]; then
          uv run --no-sync bash -x ./tests/run_unit.sh --cov=nemo_rl --cov-report=term --cov-report=json
        else
          echo Skipping unit tests for docs-only level
        fi
      DOC_TEST_SCRIPT: |
        cd /opt/nemo-rl/docs
        if [[ "${{ needs.pre-flight.outputs.test_level }}" =~ ^(docs|L0|L1|L2)$ ]]; then
          uv run --no-sync sphinx-build -b doctest . _build/doctest
        else
          echo Skipping doc tests for level ${{ needs.pre-flight.outputs.test_level }}
        fi
      FUNCTIONAL_TEST_SCRIPT: |
        cd /opt/nemo-rl
        if [[ "${{ needs.pre-flight.outputs.test_level }}" =~ ^(L1|L2)$ ]]; then
          time uv run --no-sync bash ./tests/functional/sft.sh
          time uv run --no-sync bash ./tests/functional/grpo.sh
          time uv run --no-sync bash ./tests/functional/grpo_multiturn.sh
          time uv run --no-sync bash ./tests/functional/grpo_non_colocated.sh
          time uv run --no-sync bash ./tests/functional/dpo.sh
          time uv run --no-sync bash ./tests/functional/eval.sh
          time uv run --no-sync bash ./tests/functional/test_mcore_extra_installed_correctly.sh
        else
          echo Skipping functional tests for level ${{ needs.pre-flight.outputs.test_level }}
        fi
      # TODO: enable once we have convergence tests in CI
      #CONVERGENCE_TEST_SCRIPT: |
      #  cd /opt/nemo-rl
      #  if [[ "${{ needs.pre-flight.outputs.test_level }}" =~ ^(L2)$  ]]; then
      #    echo "Running convergence tests"
      #    # Add your convergence test commands here
      #    # uv run --no-sync bash ./tests/convergence/test.sh
      #  else
      #    echo "Skipping convergence tests for level ${{ needs.pre-flight.outputs.test_level }}"
      #  fi
      AFTER_SCRIPT: |
        cd /opt/nemo-rl
        cat <<EOF | tee -a $GITHUB_STEP_SUMMARY
        # Test Summary for level: ${{ needs.pre-flight.outputs.test_level }}

        ## Unit test results
        \`\`\`json
        $(if [[ "${{ needs.pre-flight.outputs.test_level }}" =~ ^(L0|L1|L2)$ ]]; then cat tests/unit/unit_results.json || echo "n/a"; else echo "Not run"; fi)
        \`\`\`

        ## Test Level: ${{ needs.pre-flight.outputs.test_level }}
        EOF
    secrets:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

  coverage:
    name: Upload coverage to Codecov
    needs: [tests]
    if: ${{ contains('L0 L1 L2', needs.pre-flight.outputs.test_level) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage-report
          path: .

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.json
          flags: unit-tests
          verbose: true
          override_branch: ${{ github.event_name == 'merge_group' && 'main' || '' }}

  CI_QA_Gate:
    name: CI quality check
    if: always()
    runs-on: ubuntu-latest
    needs:
      - pre-flight
      - lint-check
      - sphinx-build
      - tests
    steps:
      - name: main
        env:
          JOB_RESULTS: ${{ toJSON(needs) }}
          # Job is considered successful if nothing was run, or if all jobs were successful (the tests run even if only docs were run b/c doctests are selected)
          ALL_SUCCESS: >-
            ${{
              needs.lint-check.result == 'success' &&
              (
                needs.pre-flight.outputs.test_level == 'none' ||
                (
                  needs.pre-flight.outputs.test_level != 'none' &&
                  needs.sphinx-build.result == 'success' &&
                  needs.tests.result == 'success' &&
                  (needs.mypy-check.result == 'success' || true)
                )
              )
            }}
          CI_SKIP: ${{ github.event.label.name == 'Skip CICD' }}
          TEST_LEVEL: ${{ needs.pre-flight.outputs.test_level }}
        run: |
          SUMMARY=$(echo $JOB_RESULTS | jq 'to_entries[] | .key + ": " + .value.result' | tr -d '"')
          echo '🤖: CICD Result for test level: ${{ needs.pre-flight.outputs.test_level }}' >> $GITHUB_STEP_SUMMARY
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          if [[ "$TEST_LEVEL" == "none" ]]; then
            echo "No tests were run, passing gate" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          test "$ALL_SUCCESS" = "true" || test "$CI_SKIP" = "true"

  DCO_merge_group:
    name: DCO
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
      - run: echo "The real DCO check happens on PRs only. This is a placeholder for the merge queue to keep the DCO check as a required status check."
